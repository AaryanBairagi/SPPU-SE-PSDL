// Assignment 14: Arduino - Digital & Analog IO

const int ledPin = 9;      // LED connected to pin 9 (PWM pin)
const int buttonPin = 2;   // Push button on pin 2
const int sensorPin = A0;  // Analog sensor (e.g., potentiometer)
const int motorPin = 3;    // Motor/actuator on PWM pin 3

void setup() {
  pinMode(ledPin, OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP);  // internal pull-up resistor
  pinMode(motorPin, OUTPUT);
  Serial.begin(9600);
}

void loop() {
  // --- Digital IO ---
  if (digitalRead(buttonPin) == LOW) {
    digitalWrite(ledPin, HIGH);   // turn LED ON when button pressed
  } else {
    digitalWrite(ledPin, LOW);    // turn LED OFF otherwise
  }

  // --- Analog IO ---
  int sensorValue = analogRead(sensorPin);     // 0â€“1023
  int pwmValue = map(sensorValue, 0, 1023, 0, 255);
  analogWrite(motorPin, pwmValue);             // control motor/actuator
  Serial.println(pwmValue);                    // debug in Serial Monitor

  delay(100);
}
------------------------------------------------------------------------------------------------------------------------------------------
# Assignment 14: Raspberry Pi - Digital & Analog IO
# Requires: RPi.GPIO and an ADC module (like MCP3008) for analog input

import RPi.GPIO as GPIO
import time
import spidev  # for MCP3008 ADC

LED = 17
BUTTON = 27

# Setup GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setup(LED, GPIO.OUT)
GPIO.setup(BUTTON, GPIO.IN, pull_up_down=GPIO.PUD_UP)

# Setup SPI for MCP3008
spi = spidev.SpiDev()
spi.open(0, 0)    # bus 0, device 0
spi.max_speed_hz = 1350000

def read_adc(channel):
    adc = spi.xfer2([1, (8+channel)<<4, 0])
    data = ((adc[1]&3) << 8) + adc[2]
    return data

try:
    while True:
        # Digital IO
        if GPIO.input(BUTTON) == GPIO.LOW:
            GPIO.output(LED, True)
        else:
            GPIO.output(LED, False)

        # Analog IO
        sensor_value = read_adc(0)  # read from channel 0
        print("Sensor:", sensor_value)
        time.sleep(0.1)

except KeyboardInterrupt:
    pass
finally:
    GPIO.cleanup()
    spi.close()
